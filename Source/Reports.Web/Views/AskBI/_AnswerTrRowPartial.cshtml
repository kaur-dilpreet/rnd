@model Reports.Core.Domain.Models.GenAIAnswerModel

<div class="questionContainer card @(Model.IsCorrect.HasValue && !Model.IsCorrect.Value ? "notCorrect" : String.Empty)" data-uniqueid="@Model.UniqueId">
    <div class="questionDateTime">
        @Html.Partial("_DatePartial", new Reports.Core.Domain.Models.DateModel(Model.CreationDateTime, true))
    </div>
    <div class="question">
        <h3>Question:</h3>
        <div class="questionWrapper">
            @Model.Question
        </div>
    </div>
    @if (Model.Status == "complete" || Model.Status == "error")
    {
        List<String> colors = new List<String>() { "#2cbce3", "#c140ff", "#fec901", "#32dac8", "#ac82f2" };

        if (!String.IsNullOrEmpty(Model.Answer))
        {
            <div class="answer">
                @if (Model.Status == "complete")
                {
                    <h3>Answer:</h3>
                }
                else
                {
                    <h3>Error:</h3>
                }
                <div class="answerWrapper">
                    @(new MvcHtmlString(Model.Answer.Replace("\n", "<br />")))
                </div>
                @if (!String.IsNullOrEmpty(Model.Data))
                {
                    Boolean showDollarSign = false;

                    List<List<List<object>>> data = Reports.Core.Utilities.Utilities.DeserializeStatic<List<List<List<object>>>>(Model.Data);

                    foreach (List<List<object>> table in data)
                    {
                        if (table.Count > 1)
                        {
                            for (Int32 i = table.Count - 1; i >= 0; i--)
                            {
                                for (Int32 j = 0; j < table[i].Count; j++)
                                {
                                    if (table[i][j] == null)
                                    {
                                        table.RemoveAt(i);
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    if (data.Count > 0)
                    {
                        foreach (List<List<object>> table in data)
                        {
                            if (table.Count > 2 && table[0].Count > 1)
                            {
                                if (table[1][0].GetType() == typeof(String))
                                {
                                    String chartType = "bar";
                                    String title2 = String.Empty;

                                    List<String> categories = new List<String>();

                                    Reports.Core.Domain.Models.MultiColumnChartDataSeriesModel dataSeries = new Reports.Core.Domain.Models.MultiColumnChartDataSeriesModel()
                                    {
                                        Items = new List<Reports.Core.Domain.Models.MultiColumnChartDataSeries>()
                                    };

                                    for (Int32 i = 1; i < table.Count; i++)
                                    {
                                        categories.Add(table[i][0].ToString());
                                    }

                                    for (Int32 j = 1; j < table[0].Count; j++)
                                    {
                                        if (table[1][j].GetType() == typeof(double) || table[1][j].GetType() == typeof(Int64))
                                        {
                                            dataSeries.Items.Add(new Reports.Core.Domain.Models.MultiColumnChartDataSeries()
                                            {
                                                Name = table[0][j].ToString()
                                            });
                                        }
                                        else if (table[1][j].ToString().Trim().StartsWith("$"))
                                        {
                                            dataSeries.Items.Add(new Reports.Core.Domain.Models.MultiColumnChartDataSeries()
                                            {
                                                Name = table[0][j].ToString()
                                            });

                                            showDollarSign = true;
                                        }
                                        else if (table[1][j].ToString().Trim().EndsWith("%"))
                                        {
                                            dataSeries.Items.Add(new Reports.Core.Domain.Models.MultiColumnChartDataSeries()
                                            {
                                                Name = table[0][j].ToString()
                                            });

                                            title2 = table[0][j].ToString();
                                            chartType = "column";
                                        }
                                    }

                                    for (Int32 i = 1; i < table.Count; i++)
                                    {
                                        Int32 index = 0;
                                        Int32 colorIndex = 0;

                                        for (Int32 j = 1; j < table[i].Count; j++)
                                        {
                                            if (table[1][j].GetType() == typeof(double) || table[1][j].GetType() == typeof(Int64))
                                            {
                                                float value;

                                                if (float.TryParse(table[i][j].ToString(), out value))
                                                {
                                                    dataSeries.Items[index].Values.Add(new Reports.Core.Domain.Models.MultiColumnChartDataSerieValue()
                                                    {
                                                        Value = value,
                                                        Color = colors[colorIndex++]
                                                    });
                                                }
                                                else
                                                {
                                                    dataSeries.Items[index].Values.Add(new Reports.Core.Domain.Models.MultiColumnChartDataSerieValue()
                                                    {
                                                        Value = 0,
                                                        Color = colors[colorIndex++]
                                                    });
                                                }

                                                index++;
                                            }
                                            else if (table[1][j].ToString().Trim().EndsWith("%"))
                                            {
                                                float value;

                                                if (float.TryParse(table[i][j].ToString().Trim(new char[] { '%', ' ' }), out value))
                                                {
                                                    dataSeries.Items[index].yAxis = 2;
                                                    dataSeries.Items[index].SerieType = "spline";
                                                    dataSeries.Items[index].Values.Add(new Reports.Core.Domain.Models.MultiColumnChartDataSerieValue()
                                                    {
                                                        Value = value,
                                                        Color = colors[colorIndex++]
                                                    });
                                                }
                                                else
                                                {
                                                    dataSeries.Items[index].yAxis = 2;
                                                    dataSeries.Items[index].SerieType = "spline";
                                                    dataSeries.Items[index].Values.Add(new Reports.Core.Domain.Models.MultiColumnChartDataSerieValue()
                                                    {
                                                        Value = 0,
                                                        Color = "#ff8300"
                                                    });
                                                }

                                                index++;
                                            }
                                            else if (table[1][j].ToString().Trim().StartsWith("$"))
                                            {
                                                float value;

                                                if (float.TryParse(table[i][j].ToString().Trim(new char[] { '$', ' ' }).Replace(",", String.Empty), out value))
                                                {
                                                    dataSeries.Items[index].Values.Add(new Reports.Core.Domain.Models.MultiColumnChartDataSerieValue()
                                                    {
                                                        Value = value,
                                                        Color = colors[colorIndex++],
                                                    });
                                                }
                                                else
                                                {
                                                    dataSeries.Items[index].Values.Add(new Reports.Core.Domain.Models.MultiColumnChartDataSerieValue()
                                                    {
                                                        Value = 0,
                                                        Color = colors[colorIndex++]
                                                    });
                                                }

                                                index++;
                                            }

                                            if (colorIndex >= colors.Count)
                                            {
                                                colorIndex = 0;
                                            }
                                        }
                                    }

                                    Reports.Core.Domain.Models.MultiColumnChartModel chartModel = new Reports.Core.Domain.Models.MultiColumnChartModel()
                                    {
                                        Title = String.Empty,
                                        SubTitle = String.Empty,
                                        ContainerId = String.Format("Bar_{0}", Guid.NewGuid().ToString().Replace("-", "_")),
                                        ChartType = chartType,
                                        PaddingRight = 20,
                                        PaddingBottom = 20,
                                        PaddingLeft = 20,
                                        PaddingTop = 20,
                                        ShowLegend = true,
                                        LegendAlign = "center",
                                        LegendVerticalAlign = "bottom",
                                        LegendLayout = "horizontal",
                                        ShowSubTitle = false,
                                        ShowTitle = false,
                                        YAxis1Title = String.Empty,
                                        YAxis2Title = title2,
                                        YAxis2LabelFormat = "{value}%",
                                        HideYAxis = false,
                                        Categories = categories,
                                        LegendY = 36,
                                        HideGridLines = true,
                                        BorderWidth = 0,
                                        BorderColor = "#ffffff",
                                        PlotShadow = false,
                                        ShowDataLabels = true,
                                        DataLabelColor = "#808285",
                                        XAxisColor = "#808285",
                                        YAxisColor = "#808285",
                                        HasFilter = false,
                                        DataSeries = dataSeries,
                                        ChartWidth = 760,
                                        ChartHeight = chartType == "column" ? 400 : categories.Count * 40,
                                        PointWidth = categories.Count > 20 ? 5 : 10,
                                        ShowDollarSign = showDollarSign
                                    };

                                    <div class="chart">
                                        @Html.Partial("_MultiColumnChartPartial", chartModel)

                                    </div>
                                }
                            }

                            if (table.Count > 1)
                            {
                                <div class="tableActions">
                                    @{
                                        Guid uniqueId = Guid.NewGuid();
                                    }
                                    <div class="rbcontextmenuBtn" data-menuid="@String.Format("contextmenu-{0}", uniqueId)"><a href="#">...</a></div>
                                    <div class="rbcontextmenu" id="@String.Format("contextmenu-{0}", uniqueId)">
                                        <ul class="contextMenu">
                                            <li>
                                                <a href="#" class="exportToCSV">Export to CSV</a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                                <table cellpadding="0" cellspacing="0">
                                    <thead>
                                        <tr>
                                            @for (Int32 j = 0; j < table[0].Count; j++)
                                            {
                                                <th>@table[0][j].ToString()</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (Int32 i = 1; i < table.Count; i++)
                                        {
                                            <tr>
                                                @for (Int32 j = 0; j < table[i].Count; j++)
                                                {
                                                    if (table[i][j].GetType() == typeof(Double) || table[i][j].GetType() == typeof(Int64))
                                                    {
                                                        double number = double.Parse(table[i][j].ToString());

                                                        if (Math.Abs(number % 1) <= (Double.Epsilon * 100))
                                                        {
                                                            <td class="number">@String.Format("{0:#,##0}", number)</td>
                                                        }
                                                        else
                                                        {
                                                            <td class="number">@table[i][j]</td>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <td>@table[i][j].ToString()</td>
                                                    }
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                        }
                    }
                }
            </div>

            if (!String.IsNullOrEmpty(Model.SQL))
            {
                <div class="sqlQuery">
                    <h3>SQL:</h3>
                    @Model.SQL
                </div>
            }

            if (!Model.TicketOpened)
            {
                <div class="createTicketContainer">
                    <input type="button" class="primaryButton createTicket" value="Create Ticket" />
                </div>
            }
            <div class="isCorrect">
                <br />
                <label>Is the result correct? </label>
                <input type="radio" name="isCorrect_@Model.UniqueId" value="true" @(Model.IsCorrect.HasValue ? Model.IsCorrect.Value ? "checked" : String.Empty : String.Empty) /> Yes
                <input type="radio" name="isCorrect_@Model.UniqueId" value="false" @(Model.IsCorrect.HasValue ? !Model.IsCorrect.Value ? "checked" : String.Empty : String.Empty) /> No
            </div>
        }
        else if (!String.IsNullOrEmpty(Model.Message))
        {
            <div class="message">
                <h3>Message:</h3>
                @Model.Message
            </div>
            if (!String.IsNullOrEmpty(Model.SQL))
            {
                <div class="sqlQuery">
                    <h3>SQL:</h3>
                    @Model.SQL
                </div>
            }
        }
    }
    else
    {
        <div class="answer inProgress">
            <h3>In Progress:</h3>
            <div class="answerWrapper">
                <div class="spinner"></div> @(new MvcHtmlString(Model.Answer.Replace("\n", "<br />")))
            </div>
        </div>
        if (!String.IsNullOrEmpty(Model.SQL))
        {
            <div class="sqlQuery">
                <h3>SQL:</h3>
                @Model.SQL
            </div>
        }
    }
</div>
